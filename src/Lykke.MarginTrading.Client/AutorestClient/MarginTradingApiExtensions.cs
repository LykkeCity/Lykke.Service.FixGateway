// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.MarginTrading.Client.AutorestClient
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for MarginTradingApi.
    /// </summary>
    public static partial class MarginTradingApiExtensions
    {
            /// <summary>
            /// Returns margin account by id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='accountId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MarginTradingAccountBackendContract> ApiAccountprofileAccountByClientIdByAccountIdGetAsync(this IMarginTradingApi operations, string clientId, string accountId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAccountprofileAccountByClientIdByAccountIdGetWithHttpMessagesAsync(clientId, accountId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns account open positions by account id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<OrderContract>> ApiAccountprofileOpenPositionsByAccountIdGetAsync(this IMarginTradingApi operations, string accountId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAccountprofileOpenPositionsByAccountIdGetWithHttpMessagesAsync(accountId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns account history by account id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='accountId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AccountHistoryBackendResponse> ApiAccountprofileHistoryByClientIdByAccountIdGetAsync(this IMarginTradingApi operations, string clientId, string accountId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAccountprofileHistoryByClientIdByAccountIdGetWithHttpMessagesAsync(clientId, accountId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackendResponseAccountDepositWithdrawResponse> ApiAccountsBalanceDepositPostAsync(this IMarginTradingApi operations, string apiKey, AccountDepositWithdrawRequest request = default(AccountDepositWithdrawRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAccountsBalanceDepositPostWithHttpMessagesAsync(apiKey, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackendResponseAccountDepositWithdrawResponse> ApiAccountsBalanceWithdrawPostAsync(this IMarginTradingApi operations, string apiKey, AccountDepositWithdrawRequest request = default(AccountDepositWithdrawRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAccountsBalanceWithdrawPostWithHttpMessagesAsync(apiKey, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Manually charge client's account. Amount is absolute, i.e. negative value
            /// goes for charging.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackendResponseAccountChargeManuallyResponse> ApiAccountsBalanceChargeManuallyPostAsync(this IMarginTradingApi operations, string apiKey, AccountChargeManuallyRequest request = default(AccountChargeManuallyRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAccountsBalanceChargeManuallyPostWithHttpMessagesAsync(apiKey, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackendResponseAccountResetResponse> ApiAccountsBalanceResetPostAsync(this IMarginTradingApi operations, string apiKey, AccounResetRequest request = default(AccounResetRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAccountsBalanceResetPostWithHttpMessagesAsync(apiKey, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            [System.Obsolete()]
            public static async Task<bool?> ApiBackofficeMarginTradingAccountsDepositPostAsync(this IMarginTradingApi operations, string apiKey, AccountDepositWithdrawRequest request = default(AccountDepositWithdrawRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiBackofficeMarginTradingAccountsDepositPostWithHttpMessagesAsync(apiKey, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            [System.Obsolete()]
            public static async Task<bool?> ApiBackofficeMarginTradingAccountsWithdrawPostAsync(this IMarginTradingApi operations, string apiKey, AccountDepositWithdrawRequest request = default(AccountDepositWithdrawRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiBackofficeMarginTradingAccountsWithdrawPostWithHttpMessagesAsync(apiKey, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            [System.Obsolete()]
            public static async Task<bool?> ApiBackofficeMarginTradingAccountsResetPostAsync(this IMarginTradingApi operations, string apiKey, AccounResetRequest request = default(AccounResetRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiBackofficeMarginTradingAccountsResetPostWithHttpMessagesAsync(apiKey, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all accounts where (balance + pnl) / Used margin less or equal than
            /// threshold value
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='threshold'>
            /// Minimal margin usege level
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AccountsMarginLevelResponse> ApiAccountsManagementMarginLevelsByThresholdGetAsync(this IMarginTradingApi operations, double threshold, string apiKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAccountsManagementMarginLevelsByThresholdGetWithHttpMessagesAsync(threshold, apiKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Close positions for accounts
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CloseAccountPositionsResponse> ApiAccountsManagementClosePositionsPostAsync(this IMarginTradingApi operations, string apiKey, CloseAccountPositionsRequest request = default(CloseAccountPositionsRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAccountsManagementClosePositionsPostWithHttpMessagesAsync(apiKey, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sets trading condition for account
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MtBackendResponseMarginTradingAccountModel> SetTradingConditionAsync(this IMarginTradingApi operations, string apiKey, SetTradingConditionModel model = default(SetTradingConditionModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetTradingConditionWithHttpMessagesAsync(apiKey, model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create accounts with requested base asset for all users
            /// that already have accounts with requested trading condition
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MtBackendResponseIEnumerableMarginTradingAccountModel> InitAccountGroupAsync(this IMarginTradingApi operations, string apiKey, InitAccountGroupRequest request = default(InitAccountGroupRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.InitAccountGroupWithHttpMessagesAsync(apiKey, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update existing settings for a pair
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='assetPairId'>
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='settings'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AssetPairContract> ApiAssetPairsByAssetPairIdPutAsync(this IMarginTradingApi operations, string assetPairId, string apiKey, AssetPairInputContract settings = default(AssetPairInputContract), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAssetPairsByAssetPairIdPutWithHttpMessagesAsync(assetPairId, apiKey, settings, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Insert new settings for a pair
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='assetPairId'>
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='settings'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AssetPairContract> ApiAssetPairsByAssetPairIdPostAsync(this IMarginTradingApi operations, string assetPairId, string apiKey, AssetPairInputContract settings = default(AssetPairInputContract), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAssetPairsByAssetPairIdPostWithHttpMessagesAsync(assetPairId, apiKey, settings, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete existing settings for a pair
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='assetPairId'>
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AssetPairContract> ApiAssetPairsByAssetPairIdDeleteAsync(this IMarginTradingApi operations, string assetPairId, string apiKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAssetPairsByAssetPairIdDeleteWithHttpMessagesAsync(assetPairId, apiKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns summary asset info
            /// </summary>
            /// <remarks>
            /// VolumeLong is a sum of long positions volume
            ///
            /// VolumeShort is a sum of short positions volume
            ///
            /// PnL is a sum of all positions PnL
            ///
            /// Header "api-key" is required
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<SummaryAssetInfo>> ApiBackofficeAssetsInfoGetAsync(this IMarginTradingApi operations, string apiKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiBackofficeAssetsInfoGetWithHttpMessagesAsync(apiKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns list of opened positions
            /// </summary>
            /// <remarks>
            /// Returns list of opened positions with matched volume greater or equal
            /// provided "volume" parameter
            ///
            /// Header "api-key" is required
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='volume'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<OrderContract>> ApiBackofficePositionsByVolumeGetAsync(this IMarginTradingApi operations, string apiKey, double? volume = default(double?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiBackofficePositionsByVolumeGetWithHttpMessagesAsync(apiKey, volume, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns list of pending orders
            /// </summary>
            /// <remarks>
            /// Returns list of pending orders with volume greater or equal provided
            /// "volume" parameter
            ///
            /// Header "api-key" is required
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='volume'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<OrderContract>> ApiBackofficePendingOrdersByVolumeGetAsync(this IMarginTradingApi operations, string apiKey, double? volume = default(double?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiBackofficePendingOrdersByVolumeGetWithHttpMessagesAsync(apiKey, volume, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<MarginTradingAccount>> ApiBackofficeMarginTradingAccountsGetallByClientIdGetAsync(this IMarginTradingApi operations, string clientId, string apiKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiBackofficeMarginTradingAccountsGetallByClientIdGetWithHttpMessagesAsync(clientId, apiKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='accountId'>
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiBackofficeMarginTradingAccountsDeleteByClientIdByAccountIdPostAsync(this IMarginTradingApi operations, string clientId, string accountId, string apiKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiBackofficeMarginTradingAccountsDeleteByClientIdByAccountIdPostWithHttpMessagesAsync(clientId, accountId, apiKey, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<InitAccountsResponse> ApiBackofficeMarginTradingAccountsInitPostAsync(this IMarginTradingApi operations, string apiKey, InitAccountsRequest request = default(InitAccountsRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiBackofficeMarginTradingAccountsInitPostWithHttpMessagesAsync(apiKey, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='account'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiBackofficeMarginTradingAccountsAddPostAsync(this IMarginTradingApi operations, string apiKey, MarginTradingAccount account = default(MarginTradingAccount), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiBackofficeMarginTradingAccountsAddPostWithHttpMessagesAsync(apiKey, account, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<MatchingEngineRoute>> ApiBackofficeRoutesGetAsync(this IMarginTradingApi operations, string apiKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiBackofficeRoutesGetWithHttpMessagesAsync(apiKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiBackofficeRoutesPostAsync(this IMarginTradingApi operations, string apiKey, NewMatchingEngineRouteRequest request = default(NewMatchingEngineRouteRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiBackofficeRoutesPostWithHttpMessagesAsync(apiKey, request, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MatchingEngineRoute> ApiBackofficeRoutesByIdGetAsync(this IMarginTradingApi operations, string id, string apiKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiBackofficeRoutesByIdGetWithHttpMessagesAsync(id, apiKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiBackofficeRoutesByIdPutAsync(this IMarginTradingApi operations, string id, string apiKey, NewMatchingEngineRouteRequest request = default(NewMatchingEngineRouteRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiBackofficeRoutesByIdPutWithHttpMessagesAsync(id, apiKey, request, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiBackofficeRoutesByIdDeleteAsync(this IMarginTradingApi operations, string id, string apiKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiBackofficeRoutesByIdDeleteWithHttpMessagesAsync(id, apiKey, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='enabled'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiBackofficeSettingsEnabledByClientIdPostAsync(this IMarginTradingApi operations, string clientId, string apiKey, bool? enabled = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiBackofficeSettingsEnabledByClientIdPostWithHttpMessagesAsync(clientId, apiKey, enabled, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IsAliveResponse> ApiIsAliveGetAsync(this IMarginTradingApi operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiIsAliveGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<InitDataBackendResponse> ApiMtInitdataPostAsync(this IMarginTradingApi operations, string apiKey, ClientIdBackendRequest request = default(ClientIdBackendRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiMtInitdataPostWithHttpMessagesAsync(apiKey, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// uses in BoxOptions app only
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<InitChartDataBackendResponse> ApiMtInitchartdataPostAsync(this IMarginTradingApi operations, string apiKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiMtInitchartdataPostWithHttpMessagesAsync(apiKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<MarginTradingAccountBackendContract>> ApiMtInitaccountsPostAsync(this IMarginTradingApi operations, string apiKey, ClientIdBackendRequest request = default(ClientIdBackendRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiMtInitaccountsPostWithHttpMessagesAsync(apiKey, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<InitAccountInstrumentsBackendResponse> ApiMtInitaccountinstrumentsPostAsync(this IMarginTradingApi operations, string apiKey, ClientIdBackendRequest request = default(ClientIdBackendRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiMtInitaccountinstrumentsPostWithHttpMessagesAsync(apiKey, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<InitChartDataBackendResponse> ApiMtInitgraphPostAsync(this IMarginTradingApi operations, string apiKey, InitChartDataBackendRequest request = default(InitChartDataBackendRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiMtInitgraphPostWithHttpMessagesAsync(apiKey, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> ApiMtInitavailableassetsPostAsync(this IMarginTradingApi operations, string apiKey, ClientIdBackendRequest request = default(ClientIdBackendRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiMtInitavailableassetsPostWithHttpMessagesAsync(apiKey, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<AssetPairBackendContract>> ApiMtInitassetsPostAsync(this IMarginTradingApi operations, string apiKey, ClientIdBackendRequest request = default(ClientIdBackendRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiMtInitassetsPostWithHttpMessagesAsync(apiKey, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, InstrumentBidAskPairContract>> ApiMtInitpricesPostAsync(this IMarginTradingApi operations, string apiKey, InitPricesBackendRequest request = default(InitPricesBackendRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiMtInitpricesPostWithHttpMessagesAsync(apiKey, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AccountHistoryBackendResponse> ApiMtAccounthistoryPostAsync(this IMarginTradingApi operations, string apiKey, AccountHistoryBackendRequest request = default(AccountHistoryBackendRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiMtAccounthistoryPostWithHttpMessagesAsync(apiKey, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AccountNewHistoryBackendResponse> ApiMtAccounthistorynewPostAsync(this IMarginTradingApi operations, string apiKey, AccountHistoryBackendRequest request = default(AccountHistoryBackendRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiMtAccounthistorynewPostWithHttpMessagesAsync(apiKey, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OpenOrderBackendResponse> ApiMtOrderplacePostAsync(this IMarginTradingApi operations, string apiKey, OpenOrderBackendRequest request = default(OpenOrderBackendRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiMtOrderplacePostWithHttpMessagesAsync(apiKey, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MtBackendResponseBoolean> ApiMtOrderclosePostAsync(this IMarginTradingApi operations, string apiKey, CloseOrderBackendRequest request = default(CloseOrderBackendRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiMtOrderclosePostWithHttpMessagesAsync(apiKey, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MtBackendResponseBoolean> ApiMtOrdercancelPostAsync(this IMarginTradingApi operations, string apiKey, CloseOrderBackendRequest request = default(CloseOrderBackendRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiMtOrdercancelPostWithHttpMessagesAsync(apiKey, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<OrderBackendContract>> ApiMtOrderlistPostAsync(this IMarginTradingApi operations, string apiKey, ClientIdBackendRequest request = default(ClientIdBackendRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiMtOrderlistPostWithHttpMessagesAsync(apiKey, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<OrderBackendContract>> ApiMtOrderaccountlistPostAsync(this IMarginTradingApi operations, string apiKey, AccountClientIdBackendRequest request = default(AccountClientIdBackendRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiMtOrderaccountlistPostWithHttpMessagesAsync(apiKey, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ClientOrdersBackendResponse> ApiMtOrderpositionsPostAsync(this IMarginTradingApi operations, string apiKey, ClientIdBackendRequest request = default(ClientIdBackendRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiMtOrderpositionsPostWithHttpMessagesAsync(apiKey, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MtBackendResponseBoolean> ApiMtOrderchangeLimitsPostAsync(this IMarginTradingApi operations, string apiKey, ChangeOrderLimitsBackendRequest request = default(ChangeOrderLimitsBackendRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiMtOrderchangeLimitsPostWithHttpMessagesAsync(apiKey, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OrderbooksBackendResponse> ApiMtOrderbooksPostAsync(this IMarginTradingApi operations, string apiKey, OrderbooksBackendRequest request = default(OrderbooksBackendRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiMtOrderbooksPostWithHttpMessagesAsync(apiKey, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MtBackendResponseString> ApiMtPingPostAsync(this IMarginTradingApi operations, string apiKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiMtPingPostWithHttpMessagesAsync(apiKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='fromParameter'>
            /// </param>
            /// <param name='to'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<IOvernightSwapHistory>> ApiOvernightswapHistoryPostAsync(this IMarginTradingApi operations, string apiKey, System.DateTime? fromParameter = default(System.DateTime?), System.DateTime? to = default(System.DateTime?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiOvernightswapHistoryPostWithHttpMessagesAsync(apiKey, fromParameter, to, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Invoke recalculation of account/instrument/direction order packages that
            /// were not calculated successfully last time.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiOvernightswapRecalcfailedordersPostAsync(this IMarginTradingApi operations, string apiKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiOvernightswapRecalcfailedordersPostWithHttpMessagesAsync(apiKey, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<AssetPairBackendContract>> ApiRisksAssetsGetAsync(this IMarginTradingApi operations, string apiKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiRisksAssetsGetWithHttpMessagesAsync(apiKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<MarginTradingAccountBackendContract>> ApiRisksAccountsGetAsync(this IMarginTradingApi operations, string apiKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiRisksAccountsGetWithHttpMessagesAsync(apiKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='accountId'>
            /// </param>
            /// <param name='fromParameter'>
            /// </param>
            /// <param name='to'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, IList<AccountHistoryBackendContract>>> ApiRisksAccountsHistoryGetAsync(this IMarginTradingApi operations, string apiKey, string accountId = default(string), System.DateTime? fromParameter = default(System.DateTime?), System.DateTime? to = default(System.DateTime?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiRisksAccountsHistoryGetWithHttpMessagesAsync(apiKey, accountId, fromParameter, to, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all exclusions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<DayOffExclusionContract>> ApiScheduleSettingsExclusionsGetAsync(this IMarginTradingApi operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiScheduleSettingsExclusionsGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create exclusion
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contract'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DayOffExclusionContract> ApiScheduleSettingsExclusionsPostAsync(this IMarginTradingApi operations, DayOffExclusionInputContract contract = default(DayOffExclusionInputContract), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiScheduleSettingsExclusionsPostWithHttpMessagesAsync(contract, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get exclusion by id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DayOffExclusionContract> ApiScheduleSettingsExclusionsByIdGetAsync(this IMarginTradingApi operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiScheduleSettingsExclusionsByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update exclusion
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='contract'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DayOffExclusionContract> ApiScheduleSettingsExclusionsByIdPutAsync(this IMarginTradingApi operations, System.Guid id, DayOffExclusionInputContract contract = default(DayOffExclusionInputContract), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiScheduleSettingsExclusionsByIdPutWithHttpMessagesAsync(id, contract, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete exclusion
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiScheduleSettingsExclusionsByIdDeleteAsync(this IMarginTradingApi operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiScheduleSettingsExclusionsByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get all compiled exclusions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CompiledExclusionsListContract> ApiScheduleSettingsExclusionsCompiledGetAsync(this IMarginTradingApi operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiScheduleSettingsExclusionsCompiledGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ScheduleSettingsContract> ApiScheduleSettingsGetAsync(this IMarginTradingApi operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiScheduleSettingsGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scheduleSettingsContract'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ScheduleSettingsContract> ApiScheduleSettingsPutAsync(this IMarginTradingApi operations, ScheduleSettingsContract scheduleSettingsContract = default(ScheduleSettingsContract), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiScheduleSettingsPutWithHttpMessagesAsync(scheduleSettingsContract, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MtBackendResponseBoolean> ApiServiceMaintenanceGetAsync(this IMarginTradingApi operations, string apiKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiServiceMaintenanceGetWithHttpMessagesAsync(apiKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='enabled'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MtBackendResponseBoolean> ApiServiceMaintenancePostAsync(this IMarginTradingApi operations, string apiKey, bool? enabled = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiServiceMaintenancePostWithHttpMessagesAsync(apiKey, enabled, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MtBackendResponseTradingConditionModel> AddOrReplaceTradingConditionAsync(this IMarginTradingApi operations, string apiKey, TradingConditionModel model = default(TradingConditionModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddOrReplaceTradingConditionWithHttpMessagesAsync(apiKey, model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MtBackendResponseAccountGroupModel> AddOrReplaceAccountGroupAsync(this IMarginTradingApi operations, string apiKey, AccountGroupModel model = default(AccountGroupModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddOrReplaceAccountGroupWithHttpMessagesAsync(apiKey, model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MtBackendResponseIEnumerableAccountAssetPairModel> AssignInstrumentsAsync(this IMarginTradingApi operations, string apiKey, AssignInstrumentsRequest model = default(AssignInstrumentsRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AssignInstrumentsWithHttpMessagesAsync(apiKey, model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackendResponseAccountAssetPairContract> AddOrReplaceAccountAssetAsync(this IMarginTradingApi operations, string apiKey, AccountAssetPairContract model = default(AccountAssetPairContract), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddOrReplaceAccountAssetWithHttpMessagesAsync(apiKey, model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
