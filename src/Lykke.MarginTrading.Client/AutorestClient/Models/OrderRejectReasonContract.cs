// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.MarginTrading.Client.AutorestClient.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for OrderRejectReasonContract.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum OrderRejectReasonContract
    {
        [EnumMember(Value = "None")]
        None,
        [EnumMember(Value = "NoLiquidity")]
        NoLiquidity,
        [EnumMember(Value = "NotEnoughBalance")]
        NotEnoughBalance,
        [EnumMember(Value = "LeadToStopOut")]
        LeadToStopOut,
        [EnumMember(Value = "AccountInvalidState")]
        AccountInvalidState,
        [EnumMember(Value = "InvalidExpectedOpenPrice")]
        InvalidExpectedOpenPrice,
        [EnumMember(Value = "InvalidVolume")]
        InvalidVolume,
        [EnumMember(Value = "InvalidTakeProfit")]
        InvalidTakeProfit,
        [EnumMember(Value = "InvalidStoploss")]
        InvalidStoploss,
        [EnumMember(Value = "InvalidInstrument")]
        InvalidInstrument,
        [EnumMember(Value = "InvalidAccount")]
        InvalidAccount,
        [EnumMember(Value = "TradingConditionError")]
        TradingConditionError,
        [EnumMember(Value = "TechnicalError")]
        TechnicalError
    }
    internal static class OrderRejectReasonContractEnumExtension
    {
        internal static string ToSerializedValue(this OrderRejectReasonContract? value)
        {
            return value == null ? null : ((OrderRejectReasonContract)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this OrderRejectReasonContract value)
        {
            switch( value )
            {
                case OrderRejectReasonContract.None:
                    return "None";
                case OrderRejectReasonContract.NoLiquidity:
                    return "NoLiquidity";
                case OrderRejectReasonContract.NotEnoughBalance:
                    return "NotEnoughBalance";
                case OrderRejectReasonContract.LeadToStopOut:
                    return "LeadToStopOut";
                case OrderRejectReasonContract.AccountInvalidState:
                    return "AccountInvalidState";
                case OrderRejectReasonContract.InvalidExpectedOpenPrice:
                    return "InvalidExpectedOpenPrice";
                case OrderRejectReasonContract.InvalidVolume:
                    return "InvalidVolume";
                case OrderRejectReasonContract.InvalidTakeProfit:
                    return "InvalidTakeProfit";
                case OrderRejectReasonContract.InvalidStoploss:
                    return "InvalidStoploss";
                case OrderRejectReasonContract.InvalidInstrument:
                    return "InvalidInstrument";
                case OrderRejectReasonContract.InvalidAccount:
                    return "InvalidAccount";
                case OrderRejectReasonContract.TradingConditionError:
                    return "TradingConditionError";
                case OrderRejectReasonContract.TechnicalError:
                    return "TechnicalError";
            }
            return null;
        }

        internal static OrderRejectReasonContract? ParseOrderRejectReasonContract(this string value)
        {
            switch( value )
            {
                case "None":
                    return OrderRejectReasonContract.None;
                case "NoLiquidity":
                    return OrderRejectReasonContract.NoLiquidity;
                case "NotEnoughBalance":
                    return OrderRejectReasonContract.NotEnoughBalance;
                case "LeadToStopOut":
                    return OrderRejectReasonContract.LeadToStopOut;
                case "AccountInvalidState":
                    return OrderRejectReasonContract.AccountInvalidState;
                case "InvalidExpectedOpenPrice":
                    return OrderRejectReasonContract.InvalidExpectedOpenPrice;
                case "InvalidVolume":
                    return OrderRejectReasonContract.InvalidVolume;
                case "InvalidTakeProfit":
                    return OrderRejectReasonContract.InvalidTakeProfit;
                case "InvalidStoploss":
                    return OrderRejectReasonContract.InvalidStoploss;
                case "InvalidInstrument":
                    return OrderRejectReasonContract.InvalidInstrument;
                case "InvalidAccount":
                    return OrderRejectReasonContract.InvalidAccount;
                case "TradingConditionError":
                    return OrderRejectReasonContract.TradingConditionError;
                case "TechnicalError":
                    return OrderRejectReasonContract.TechnicalError;
            }
            return null;
        }
    }
}
