// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.MarginTrading.Client.AutorestClient.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class OrderFullContract
    {
        /// <summary>
        /// Initializes a new instance of the OrderFullContract class.
        /// </summary>
        public OrderFullContract()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the OrderFullContract class.
        /// </summary>
        /// <param name="fillType">Possible values include: 'FillOrKill',
        /// 'PartialFill'</param>
        /// <param name="orderUpdateType">Possible values include: 'Place',
        /// 'Cancel', 'Activate', 'Reject', 'Closing', 'Close',
        /// 'ChangeOrderLimits'</param>
        /// <param name="type">Possible values include: 'Buy', 'Sell'</param>
        /// <param name="status">Possible values include:
        /// 'WaitingForExecution', 'Active', 'Closed', 'Rejected',
        /// 'Closing'</param>
        /// <param name="closeReason">Possible values include: 'None', 'Close',
        /// 'StopLoss', 'TakeProfit', 'StopOut', 'Canceled',
        /// 'CanceledBySystem', 'ClosedByBroker'</param>
        /// <param name="rejectReason">Possible values include: 'None',
        /// 'NoLiquidity', 'NotEnoughBalance', 'LeadToStopOut',
        /// 'AccountInvalidState', 'InvalidExpectedOpenPrice', 'InvalidVolume',
        /// 'InvalidTakeProfit', 'InvalidStoploss', 'InvalidInstrument',
        /// 'InvalidAccount', 'TradingConditionError', 'TechnicalError'</param>
        /// <param name="matchingEngineMode">Possible values include:
        /// 'MarketMaker', 'Stp'</param>
        public OrderFullContract(int assetAccuracy, double quoteRate, OrderFillTypeContract fillType, double interestRateSwap, double marginRate, double marginInit, double marginMaintenance, double openCrossPrice, double closeCrossPrice, OrderUpdateTypeContract orderUpdateType, OrderDirectionContract type, OrderStatusContract status, OrderCloseReasonContract closeReason, OrderRejectReasonContract rejectReason, double openPrice, double closePrice, System.DateTime createDate, double volume, double matchedVolume, double matchedCloseVolume, double fpl, double pnL, double commissionLot, double openCommission, double closeCommission, double swapCommission, double openPriceEquivalent, double closePriceEquivalent, MatchingEngineModeContract matchingEngineMode, string tradingConditionId = default(string), System.DateTime? startClosingDate = default(System.DateTime?), string comment = default(string), string id = default(string), string clientId = default(string), string accountId = default(string), string accountAssetId = default(string), string instrument = default(string), string rejectReasonText = default(string), double? expectedOpenPrice = default(double?), System.DateTime? openDate = default(System.DateTime?), System.DateTime? closeDate = default(System.DateTime?), double? takeProfit = default(double?), double? stopLoss = default(double?), string equivalentAsset = default(string), string openExternalOrderId = default(string), string openExternalProviderId = default(string), string closeExternalOrderId = default(string), string closeExternalProviderId = default(string), IList<MatchedOrderBackendContract> matchedOrders = default(IList<MatchedOrderBackendContract>), IList<MatchedOrderBackendContract> matchedCloseOrders = default(IList<MatchedOrderBackendContract>), string legalEntity = default(string))
        {
            TradingConditionId = tradingConditionId;
            AssetAccuracy = assetAccuracy;
            QuoteRate = quoteRate;
            StartClosingDate = startClosingDate;
            FillType = fillType;
            Comment = comment;
            InterestRateSwap = interestRateSwap;
            MarginRate = marginRate;
            MarginInit = marginInit;
            MarginMaintenance = marginMaintenance;
            OpenCrossPrice = openCrossPrice;
            CloseCrossPrice = closeCrossPrice;
            OrderUpdateType = orderUpdateType;
            Id = id;
            ClientId = clientId;
            AccountId = accountId;
            AccountAssetId = accountAssetId;
            Instrument = instrument;
            Type = type;
            Status = status;
            CloseReason = closeReason;
            RejectReason = rejectReason;
            RejectReasonText = rejectReasonText;
            ExpectedOpenPrice = expectedOpenPrice;
            OpenPrice = openPrice;
            ClosePrice = closePrice;
            CreateDate = createDate;
            OpenDate = openDate;
            CloseDate = closeDate;
            Volume = volume;
            MatchedVolume = matchedVolume;
            MatchedCloseVolume = matchedCloseVolume;
            TakeProfit = takeProfit;
            StopLoss = stopLoss;
            Fpl = fpl;
            PnL = pnL;
            CommissionLot = commissionLot;
            OpenCommission = openCommission;
            CloseCommission = closeCommission;
            SwapCommission = swapCommission;
            EquivalentAsset = equivalentAsset;
            OpenPriceEquivalent = openPriceEquivalent;
            ClosePriceEquivalent = closePriceEquivalent;
            OpenExternalOrderId = openExternalOrderId;
            OpenExternalProviderId = openExternalProviderId;
            CloseExternalOrderId = closeExternalOrderId;
            CloseExternalProviderId = closeExternalProviderId;
            MatchedOrders = matchedOrders;
            MatchedCloseOrders = matchedCloseOrders;
            LegalEntity = legalEntity;
            MatchingEngineMode = matchingEngineMode;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "tradingConditionId")]
        public string TradingConditionId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "assetAccuracy")]
        public int AssetAccuracy { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "quoteRate")]
        public double QuoteRate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "startClosingDate")]
        public System.DateTime? StartClosingDate { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'FillOrKill', 'PartialFill'
        /// </summary>
        [JsonProperty(PropertyName = "fillType")]
        public OrderFillTypeContract FillType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "comment")]
        public string Comment { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "interestRateSwap")]
        public double InterestRateSwap { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "marginRate")]
        public double MarginRate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "marginInit")]
        public double MarginInit { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "marginMaintenance")]
        public double MarginMaintenance { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "openCrossPrice")]
        public double OpenCrossPrice { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "closeCrossPrice")]
        public double CloseCrossPrice { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Place', 'Cancel',
        /// 'Activate', 'Reject', 'Closing', 'Close', 'ChangeOrderLimits'
        /// </summary>
        [JsonProperty(PropertyName = "orderUpdateType")]
        public OrderUpdateTypeContract OrderUpdateType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "clientId")]
        public string ClientId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "accountId")]
        public string AccountId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "accountAssetId")]
        public string AccountAssetId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "instrument")]
        public string Instrument { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Buy', 'Sell'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public OrderDirectionContract Type { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'WaitingForExecution',
        /// 'Active', 'Closed', 'Rejected', 'Closing'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public OrderStatusContract Status { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'None', 'Close', 'StopLoss',
        /// 'TakeProfit', 'StopOut', 'Canceled', 'CanceledBySystem',
        /// 'ClosedByBroker'
        /// </summary>
        [JsonProperty(PropertyName = "closeReason")]
        public OrderCloseReasonContract CloseReason { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'None', 'NoLiquidity',
        /// 'NotEnoughBalance', 'LeadToStopOut', 'AccountInvalidState',
        /// 'InvalidExpectedOpenPrice', 'InvalidVolume', 'InvalidTakeProfit',
        /// 'InvalidStoploss', 'InvalidInstrument', 'InvalidAccount',
        /// 'TradingConditionError', 'TechnicalError'
        /// </summary>
        [JsonProperty(PropertyName = "rejectReason")]
        public OrderRejectReasonContract RejectReason { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "rejectReasonText")]
        public string RejectReasonText { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "expectedOpenPrice")]
        public double? ExpectedOpenPrice { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "openPrice")]
        public double OpenPrice { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "closePrice")]
        public double ClosePrice { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "createDate")]
        public System.DateTime CreateDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "openDate")]
        public System.DateTime? OpenDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "closeDate")]
        public System.DateTime? CloseDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "volume")]
        public double Volume { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "matchedVolume")]
        public double MatchedVolume { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "matchedCloseVolume")]
        public double MatchedCloseVolume { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "takeProfit")]
        public double? TakeProfit { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "stopLoss")]
        public double? StopLoss { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "fpl")]
        public double Fpl { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "pnL")]
        public double PnL { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "commissionLot")]
        public double CommissionLot { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "openCommission")]
        public double OpenCommission { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "closeCommission")]
        public double CloseCommission { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "swapCommission")]
        public double SwapCommission { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "equivalentAsset")]
        public string EquivalentAsset { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "openPriceEquivalent")]
        public double OpenPriceEquivalent { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "closePriceEquivalent")]
        public double ClosePriceEquivalent { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "openExternalOrderId")]
        public string OpenExternalOrderId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "openExternalProviderId")]
        public string OpenExternalProviderId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "closeExternalOrderId")]
        public string CloseExternalOrderId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "closeExternalProviderId")]
        public string CloseExternalProviderId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "matchedOrders")]
        public IList<MatchedOrderBackendContract> MatchedOrders { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "matchedCloseOrders")]
        public IList<MatchedOrderBackendContract> MatchedCloseOrders { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "legalEntity")]
        public string LegalEntity { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'MarketMaker', 'Stp'
        /// </summary>
        [JsonProperty(PropertyName = "matchingEngineMode")]
        public MatchingEngineModeContract MatchingEngineMode { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (MatchedOrders != null)
            {
                foreach (var element in MatchedOrders)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (MatchedCloseOrders != null)
            {
                foreach (var element1 in MatchedCloseOrders)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
